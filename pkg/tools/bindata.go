// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x6f\x1b\xb9\x0e\x7e\xcf\xaf\x20\x12\xe0\xb4\x3d\x38\x13\x27\x45\x7b\xda\x35\xce\x4b\x9a\xb8\x59\xa3\x89\x6d\xe4\xd6\x7d\x33\x64\x0d\x6d\x6b\xad\x91\x66\x25\xcd\x24\x3e\xbf\x7e\xc1\xb9\x79\x6e\x76\x9c\x9b\xb1\xf5\x4b\x1b\x49\xfc\x44\x52\x24\x45\x52\xe3\x79\xde\x1e\x0b\xc5\x1d\x1a\x2b\xb4\xea\x02\x0b\x43\xdb\x89\x8f\xf7\x16\x42\xf9\x5d\x38\x63\x18\x68\x75\x8d\x6e\x2f\x40\xc7\x7c\xe6\x58\x77\x0f\x40\xb1\x00\xbb\x10\x0b\xe3\x24\xba\xec\x6f\x1b\x32\x8e\x5d\x58\x44\x13\xf4\xec\xd2\x3a\x0c\xf6\x6c\x88\x9c\x96\x5b\x94\xc8\x9d\x36\xf4\x7f\x80\x80\x39\x3e\xbf\x60\x13\x94\x36\x1d\x00\x30\x91\x72\xa2\x0a\xe9\x30\x08\x25\x73\x98\xd1\x94\x36\xa7\x1f\x53\x4a\x3b\xe6\x84\x56\x05\x06\xc0\x01\xb8\x39\x12\xff\xcc\x04\xda\x80\x41\xa2\xf7\xcb\x6b\xe1\x5e\x48\x09\x13\x04\x83\xa1\x64\x1c\x7d\xe8\x7f\x07\x2e\x23\xeb\xd0\x80\xb0\xc4\x87\x12\x6a\x06\x91\xf2\xd1\xac\x90\x50\xb1\x89\x44\x1f\x50\xc5\xc5\x66\xf9\xa4\x14\x13\x62\x3a\xd5\x48\x6d\x30\x66\x32\xc2\x06\x45\x1c\xd8\xea\xea\x38\xb0\x6b\x56\xa6\xda\xa8\xad\x4e\x07\xcb\x14\xf5\xe3\xa0\x9f\xac\x28\xb8\x55\xc5\x00\xf9\x01\xd1\x6f\xae\xad\x1b\xa0\xbb\xd7\x66\xd1\x05\x67\x0a\x70\x5f\xd9\x91\x96\x82\x2f\xbb\x70\x9a\x6a\xea\xbb\x30\xd6\xfd\x14\x6e\xfe\x7b\x4a\xb2\x97\xab\x9f\x20\x46\xfd\x33\xd2\x24\x01\x80\xd3\xf0\xfe\xf8\x43\xa6\x3e\xb8\xbb\xb4\x34\x62\x23\x13\x8b\x18\x73\x3e\x80\x6b\xe5\x98\x50\x48\x07\x66\x1d\x33\x2b\xb8\xf7\x4e\xd3\x59\xf1\x39\xf2\x05\xfa\x1f\x80\x29\x1f\xde\x7f\xfc\x40\x20\x19\x24\x9d\x77\x64\x11\xf4\x14\x94\x45\x95\x9c\xa2\x02\xa1\x44\x09\xb6\x24\xde\xa8\x7f\x56\x11\xed\x00\x26\x5a\x3b\xeb\x0c\x0b\x21\x34\x9a\xa3\x1f\x19\x04\x85\xe8\x27\x9c\x72\x83\xcc\x21\x30\xc2\x9a\x8a\x59\xc0\x42\x42\x2f\x19\xf8\xca\xee\x33\x40\x8b\x26\x16\x1c\x4f\x38\xd7\x91\x72\x83\x96\x63\x21\xde\x4e\x73\xd6\x8a\xe3\x39\x80\x9b\x39\xd6\xf8\x06\xae\x43\x81\x36\xa7\x7f\x67\x61\x2a\xf1\x21\xd6\x32\x0a\x10\x7c\x23\xe2\x42\xb4\x03\x62\x96\x54\xe1\xe3\x94\x45\xd2\x25\x2c\x92\x6a\x43\x19\xcd\x84\x02\x5f\x98\x44\x77\xa8\x6c\x64\xd0\x82\x9b\xb3\x95\x92\x13\x3a\x61\x12\xff\xa4\xed\x48\x7a\xf4\x61\xb2\x84\xcc\x88\xe1\x5f\xc5\x51\xe1\x83\xb0\x0e\xb4\x4a\x88\x48\xa1\x19\x8a\x97\x59\x60\x68\x30\x64\x06\x3d\xa5\xfd\x95\x31\x8b\x80\xcd\xc8\x7c\xcd\xc2\x69\x6b\x1d\x9b\x09\x35\xeb\xc4\x41\x6e\x8f\x47\x87\x9f\x0f\x3f\x55\x17\x8f\x22\x29\x73\x93\xeb\x4f\x07\xda\x8d\x0c\xd2\xe9\x16\xab\xb8\x0e\x02\xa6\xfc\x95\x71\x7b\xd0\x29\xef\x7d\x68\xe7\xc5\x54\xaa\xb0\x4b\x3a\x0f\x5b\x26\x48\x39\x5e\x7c\xb5\xde\x4a\xad\x5e\xaa\x30\xeb\xf9\xc2\x14\x4b\x01\x02\x22\x1e\x31\x37\xef\x42\x27\x53\xad\x57\x25\x68\xe0\x9a\x48\x95\x00\x0e\xe0\x4c\xab\x77\x0e\x98\xef\xc3\x7e\x8a\x66\x74\xc8\x66\x49\x50\xea\xc2\x37\x91\x1e\x80\xd0\x8a\xc9\xfd\xff\x80\x70\x69\x9c\x92\x8c\x2f\xd2\xcd\x01\x95\x33\xcb\x35\x2c\x95\xf7\xca\xf7\xf7\x35\x5f\xa0\xb1\x9a\x2f\xd6\x10\xc5\xcc\x10\x61\x27\x5d\x78\x58\x59\x99\x83\x48\x3d\x5b\x43\x4d\x67\x5f\x9e\x3d\x80\x69\x12\x26\x6d\x64\x28\x7c\x92\x81\xa5\x5b\x48\x31\xe9\x64\x76\xd4\x49\xce\xd6\xa6\x46\x64\xc9\x8a\x2a\x66\x92\x6f\x1a\x33\xe3\x49\x31\xd9\xb0\xb1\x57\x5f\x52\x08\x8d\xf1\x1a\xb2\xf2\x8c\xd7\xd0\x03\x31\x59\xf5\x52\x58\x13\x54\xc9\xc3\x79\x64\x84\x5b\x92\x0f\xe3\x83\xeb\x96\x08\x42\x23\x62\x21\x71\x86\x7e\x25\xc8\x00\x5d\x1b\x4d\xcb\xfb\x71\xfb\xad\x37\x1e\x0c\xcf\x7a\xe3\xc1\xc9\x65\xaf\x04\x93\x04\xf6\xef\x46\x07\x65\x6c\x80\xa9\x40\xe9\x5f\xe1\xb4\x3a\x4a\x77\xc5\xea\xea\x8e\x8f\x6b\x93\x09\x51\x2a\x29\x85\xfa\x43\xd2\x38\x45\xa5\x06\x37\x77\xfd\xab\x9b\x8b\xde\xcd\xf8\xac\x7f\x7d\xf2\xed\xa2\x37\xfe\x71\x77\xf9\x38\x4b\x69\x58\xbc\x64\xe1\x0f\x5c\xb6\x70\x56\x51\xa0\x97\x2e\xae\x2d\x59\xe0\xb2\x0b\xbe\xb0\x14\xcc\xc7\x8b\x38\xa8\x4d\xeb\x30\xf5\x89\x9a\x3e\xeb\x4c\x5f\x5f\xf5\x87\x77\xe3\xeb\xdb\xd1\x68\x78\x75\xb3\x33\xb6\xad\x11\x3a\x1e\xdb\x28\x0c\xb5\x71\xcf\x63\xfc\x6c\xf8\x73\x70\x31\x3c\x39\x1b\x8f\xae\x86\x37\xc3\xd3\xe1\xc5\xee\x74\xae\xef\x95\xd4\xcc\x1f\x87\x46\x3b\xcd\xb5\x7c\x9e\x00\x17\xc3\xf3\x8b\xde\x5d\x6f\x77\x7c\x4b\x3d\x93\x18\xe3\x33\xd9\x3d\x3d\xb9\xe8\x9f\x0e\xc7\xd7\xb7\xdf\x06\xbd\xdd\x19\x0a\x67\x52\x70\xed\xd9\x68\xa2\xf0\x89\x86\xd2\xbf\x3c\x39\xef\x8d\xaf\x7a\xe7\xbd\x3f\x46\xe3\x9b\xab\x93\xc1\xf5\xc5\xc9\x4d\x7f\x38\xd8\x19\xef\x49\xcc\x1e\x1b\x9c\xe1\x43\x38\x76\x86\x29\x2b\x93\x4b\xeb\x79\xfa\xbf\x3a\xf9\x39\x3e\xeb\xdd\xf5\x4f\x7b\xd7\x3b\x93\xc0\xb0\xfb\xb1\x8f\x94\x95\xd9\x67\x3a\x69\x16\x12\x2f\x86\xe7\xe7\xfd\xc1\xf9\xce\xc3\xa2\xd4\x33\x4a\x99\x9e\x69\xf1\xa3\xdb\xf1\xe5\xf0\x6c\x87\x1e\xca\xc3\xc8\x0b\xb4\xff\x54\x17\xa5\xeb\x30\x31\x91\xe1\x90\x54\x7e\xb5\x33\x7e\xb3\x84\x6e\x6c\xb4\x76\xe3\x6a\xde\xf7\x04\x3d\xa7\x8e\x5a\xf2\xd0\xeb\x36\x21\xba\xd0\x41\xc7\xf3\x5c\x23\x4b\x88\xf6\xf6\x0a\x79\x6a\x55\x41\x91\x87\xa5\x09\xd4\xf3\x32\xea\x03\xe8\x2b\xe0\xcc\x22\xdc\x53\x85\xf1\x27\x72\x07\x52\x73\x26\x8b\xac\x3e\x81\xa3\xd9\x7b\xa6\x1c\x95\x12\x54\x51\x09\x07\x4a\x3b\xd0\xd3\xa9\xe0\x82\x49\xb9\x04\x16\x33\x21\x93\xaa\x4b\x2b\x7c\x85\x84\x3d\x93\x6a\x9b\x5c\xbd\x9c\xb0\x91\x02\xf3\x8c\xf2\x2f\x0c\xa2\x46\xc6\x56\x19\xac\xd2\xda\xa5\xed\x4c\x6d\x87\xcf\x8c\x8e\xc2\x06\x61\x6d\xb8\x4a\x4a\x39\x62\xa0\xfd\x48\x56\xc2\x48\x4a\xd8\x1c\x37\xc8\xfc\xa1\x92\xcb\x86\xd5\x94\x21\xa9\xf6\x6c\x60\xd5\x06\xb7\x02\x7a\xeb\x62\xa3\x59\xd2\xbc\x2c\x87\x6e\xa7\xae\x5b\x39\xac\xb1\xfe\x26\x35\xd5\x31\x8f\x50\x7b\x54\xe0\xa0\xb3\x25\xb7\xa0\x1a\x56\xea\x59\x52\x1d\x8b\xa2\xee\x9d\xa3\x41\x98\x20\x67\x49\x5b\xc1\xcd\xd1\xdc\x0b\x8b\x45\x2d\x9c\xa8\x2a\x34\xda\x8f\x38\x02\x1a\xa3\x4d\x19\x52\x8a\x05\x82\x9b\x8b\x4a\x4f\xea\x36\x6b\x55\x68\x2a\x8f\xbd\xac\xa7\xc0\xe7\xcc\xf8\x18\xc3\x54\x48\x84\x77\xa9\x0e\x34\x39\xb1\xed\xb0\xa9\xff\xe5\xf3\x64\x32\xf1\xbe\xe2\x6f\x5f\xbc\xe3\x63\xfc\xe2\xfd\xf6\xf9\xbf\xc7\xde\xd1\xc7\x4f\x1f\x8f\x18\x3f\x3a\x3a\x3a\xfa\xd8\xe1\xc2\x18\x6d\xbd\x38\x18\x1f\x1d\x4a\x3d\x7b\xd7\x85\x81\x06\x1b\xf1\x79\x8a\xa8\x4d\x51\xd3\x2f\x9b\x15\x56\x60\xbd\xf5\xa5\x5d\x89\x95\x66\x41\x98\x29\xf3\x71\xea\xe6\xa1\x3d\xa5\x44\x7b\x4e\x91\x45\x9e\x22\x14\x5a\x3b\x32\x7a\x82\x65\x12\x7c\x58\x35\xb9\xd2\x5f\x23\x1c\xa5\x2c\x76\x26\x42\x75\x4a\xe1\x28\x1d\xf5\x78\x6d\xc0\x6a\xce\x1c\x78\x70\x3b\xe8\xff\xd1\xad\x1b\x60\xa7\x6c\x70\x9e\xd1\xf0\x3f\x92\xac\xa3\x22\x29\x6b\x51\xbd\xee\x15\xbf\x5e\x54\x7f\xeb\x70\xbd\xfb\xb8\x76\x90\x46\xe5\xa4\x5b\x56\x0e\xf9\xc0\x0c\x82\xc1\xbf\x22\x61\xd2\xde\x98\x8d\x42\x34\x81\x58\x17\x11\xff\x69\xb7\xc5\xee\xfa\x23\x39\xee\xda\xa3\xf9\x47\xdd\x02\x55\x94\xc8\x26\x3c\x50\xbc\x48\xfa\x7c\x46\xa1\x43\x5b\xb4\xfc\xb2\x5e\x5f\x27\x35\xfb\x0e\x2d\x6b\x6c\xb4\x45\x3f\xb1\x5d\xee\x6c\x93\x4e\xa8\xfd\xa6\xc9\x10\x2a\x4d\xb4\xf6\x25\xb7\xd1\xf4\x4b\x03\x7f\xb2\xf9\xe3\xa4\x15\xe6\x0f\xf2\x2b\x75\x9a\xdc\x46\x6c\xa6\xb4\x75\x82\x43\x18\x99\x50\x5b\x7c\x8b\xdb\x45\xa1\xdb\xd8\xbc\xcd\xcd\x24\x59\xf7\x02\x45\x36\x12\xc8\xc7\x93\xcc\x5f\xe9\x4a\x23\x15\x65\x7e\x9d\x34\x86\x37\xdc\x61\x25\x5b\xd9\x51\x9f\x3f\x0e\xec\x53\x4b\x86\xd7\x88\x61\xbf\x6b\xeb\x6e\xf4\x69\xed\x51\xe9\xe5\x51\xec\xf9\x9e\xf9\x76\x51\x64\xbd\xac\x4f\xbb\x47\xd6\xdd\x77\x9b\x6f\xca\xf4\x44\x4b\x4f\x63\x84\x5a\xca\xd0\x29\x9c\xcc\xb5\x75\x60\xd8\x3d\xa4\x9d\x1d\x60\x9c\xa3\xb5\x85\x71\x26\x6f\x7d\x84\x5f\xf6\xb2\x26\x87\x75\x69\x36\x12\xb6\xbb\x75\x4b\x3c\xd8\x88\xd2\x96\x18\xb4\xa9\x69\x23\x48\xe5\xd6\x6f\x24\x02\x1b\x49\xcb\xc9\x4e\x3d\xfd\x39\x80\x9b\xe1\xd9\xb0\x0b\x7e\x92\x66\x51\x81\xc2\xb5\x8f\xd9\x53\x12\xa4\x57\x67\x92\x64\x92\x95\x24\x85\xd2\x8a\x70\x2e\xb2\xb7\xf5\x2c\x49\x82\xd3\xab\x3e\xd5\x49\x0f\x4b\x10\xca\x3a\x26\xd3\xb6\x21\xe5\xa1\xe5\x0d\x85\x4a\x8f\x32\xcd\xcf\x8a\xd7\xd4\xc3\x6d\x44\xd9\xf4\x82\xb5\xe6\x11\xec\x51\xbc\xb6\x28\xd1\x16\x23\xb6\x02\xaa\x3b\x7b\x5b\x08\x78\x1c\xa8\x14\x15\xea\xaf\x72\x1b\x89\x5f\x90\xcc\x6c\x99\xca\x6c\xa5\x84\xd6\x88\xb4\x36\x1e\x6d\x03\x59\x3f\x98\xca\x63\xe0\x36\xfa\x2c\xfa\x6f\xe5\x78\xda\x16\x87\xb7\x02\xdb\x78\xca\x4f\x01\x6b\xcb\x5f\x37\x65\xaf\x5b\x71\xd7\xa2\xf6\x5a\x2e\xb7\x15\x5f\xd5\x84\xa9\x3d\xd9\xda\x08\xb4\xb6\x0c\x2c\x15\x81\xf5\x0f\x91\x8a\x6f\x90\x4e\xf3\x4e\xef\xfa\x6f\x90\x56\x0d\xde\x35\x9f\x22\xe5\x54\xa5\xc7\xc6\x2e\xec\x2f\xf7\xf7\xa0\x78\x53\xea\xc2\xfe\x27\xfa\xbb\xf4\x62\xd0\x85\x7d\xeb\xff\x7b\xbf\xc1\x9a\x99\x30\x7e\xc8\x22\x37\xd7\x46\xfc\x3f\x89\x6c\x87\x8b\xaf\xf6\x50\xe8\x4e\x7c\x3c\x41\xc7\x0a\xce\xd3\x0f\x66\xae\xb4\xc4\x6f\x42\xf9\x42\xcd\x36\x7c\x46\x65\xb4\xc4\xac\x91\xcd\x42\x71\x4e\x57\xca\x86\x9d\xf6\x00\x1a\x7b\x34\x20\x6d\x34\xf9\x13\x39\x65\x46\x5e\xb6\xfa\xba\xf2\x85\xca\xf6\x9f\x72\x91\x06\x9a\xfb\x3d\x4d\x27\xcf\xf8\x82\xcc\xd0\x9d\x48\xeb\xbd\x42\x27\x59\x66\xe0\xc1\xfe\x7e\xf2\x1f\x83\x56\x47\x86\x63\x31\x5e\x7c\xad\x63\xb3\x01\xa5\xfd\xec\x62\x8d\xd1\x4c\x56\xeb\x92\x56\x5c\xf6\xc7\x0c\xdd\x6b\x9c\x72\x8b\x8c\x05\x3b\x1e\xe5\xf3\x68\x72\x99\x6a\x12\x65\xf2\x54\xa4\xa9\xc9\x52\x70\x9f\xb2\x4b\xff\x4a\x61\xd3\xff\xdc\x33\xc7\xe7\x6f\x24\x41\xee\x63\x91\x45\x43\x33\x2f\x16\xc4\xa3\x72\xc8\xa4\xa1\xac\x26\xd4\x9b\x7a\x5a\x7e\xf9\x91\x41\x78\x93\x6c\xd9\x2b\xba\x5d\xe3\xa8\xcb\xfe\xf7\x14\xf0\xf3\x2c\x9f\x4c\x61\x53\x5f\xe8\xa6\x66\xfc\xb6\xa1\x28\x58\x1d\xf2\x1b\xe8\x67\x9d\x21\xfd\x22\x61\xca\xe3\xc6\x5f\x6f\xf4\x2c\x14\xf8\xe0\x50\xd1\x36\x36\xc3\x6c\x73\x84\xc8\x3a\x1d\xe4\x83\x3e\x4e\x85\x12\xc9\xb7\xa9\x55\x5f\xc8\x82\x53\x73\x9b\xbc\x30\x5f\x7c\xb5\x2d\xe8\xd9\x6c\x52\x5e\x07\x2c\x0c\x85\x9a\xd9\xf2\x44\x61\xa1\xf9\x4c\x69\xcb\x22\x96\xbc\xb9\x1f\x56\xf4\xf9\xfa\xe6\x45\xb0\xaf\x6b\x52\xad\x69\x49\x0d\xf0\x19\xb7\xdb\xdf\x01\x00\x00\xff\xff\xfb\xa1\xcc\x0a\x7b\x2d\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 11643, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
