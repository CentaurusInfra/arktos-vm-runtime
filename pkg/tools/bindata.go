// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdd\x53\x23\x39\x0e\x7f\xe7\xaf\x50\x41\xd5\xcd\xee\xd5\x35\x81\xb9\xdd\x9b\xd9\xd4\xbd\x30\x90\x61\x53\x03\x49\x8a\xaf\xd9\xb7\x94\xe3\x56\x12\x6f\xdc\x76\xaf\xed\x6e\xc8\xfd\xf5\x57\xea\xaf\xf4\x57\x42\x08\x90\xda\xc9\xcb\x0c\xb6\xf5\xb3\x24\x4b\xb2\x24\xb7\xe7\x79\x07\x2c\x14\x0f\x68\xac\xd0\xaa\x0b\x2c\x0c\x6d\x27\x3e\x3d\x58\x08\xe5\x77\xe1\x82\x61\xa0\xd5\x2d\xba\x83\x00\x1d\xf3\x99\x63\xdd\x03\x00\xc5\x02\xec\x42\x2c\x8c\x93\xe8\xb2\xbf\x6d\xc8\x38\x76\x61\x11\x4d\xd0\xb3\x4b\xeb\x30\x38\xb0\x21\x72\x5a\x6e\x51\x22\x77\xda\xd0\xff\x01\x02\xe6\xf8\xfc\x8a\x4d\x50\xda\x74\x00\xc0\x44\xca\x89\x2a\xa4\xc3\x20\x94\xcc\x61\x46\x53\xda\x9c\x7e\x4c\x29\xed\x98\x13\x5a\x15\x18\x00\x47\xe0\xe6\x48\xfc\x33\x13\x68\x03\x06\x89\xde\x2f\xaf\x85\x47\x21\x25\x4c\x10\x0c\x86\x92\x71\xf4\xa1\xff\x15\xb8\x8c\xac\x43\x03\xc2\x12\x1f\x4a\xa8\x19\x44\xca\x47\xb3\x42\x42\xc5\x26\x12\x7d\x40\x15\x17\x9b\xe5\x93\x52\x4c\x88\xe9\x54\x23\xb5\xc1\x98\xc9\x08\x1b\x14\x71\x60\xab\xab\xe3\xc0\xae\x59\x99\x6a\xa3\xb6\x3a\x1d\x2c\x53\xd4\x8f\x83\x7e\xb2\xa2\xe0\x56\x15\x03\xe4\x07\x44\xbf\xb9\xb6\x6e\x80\xee\x51\x9b\x45\x17\x9c\x29\xc0\x7d\x65\x47\x5a\x0a\xbe\xec\xc2\x79\xaa\xa9\xaf\xc2\x58\xf7\x5d\xb8\xf9\xef\x29\xc9\x41\xae\x7e\x82\x18\xf5\x2f\x48\x93\x04\x00\x4e\xc3\x4f\xa7\x3f\x67\xea\x83\x87\x6b\x4b\x23\x36\x32\xb1\x88\x31\xe7\x03\xb8\x56\x8e\x09\x85\x74\x60\xd6\x31\xb3\x82\xfb\xc9\x69\x3a\x2b\x3e\x47\xbe\x40\xff\x67\x60\xca\x87\x9f\x3e\xfe\x4c\x20\x19\x24\x9d\x77\x64\x11\xf4\x14\x94\x45\x95\x9c\xa2\x02\xa1\x44\x09\xb6\x24\xde\xa8\x7f\x51\x11\xed\x08\x26\x5a\x3b\xeb\x0c\x0b\x21\x34\x9a\xa3\x1f\x19\x04\x85\xe8\x27\x9c\x72\x83\xcc\x21\x30\xc2\x9a\x8a\x59\xc0\x42\x42\x2f\x19\xf8\xca\xee\x33\x40\x8b\x26\x16\x1c\xcf\x38\xd7\x91\x72\x83\x96\x63\x21\xde\xce\x73\xd6\x8a\xe3\x39\x82\xbb\x39\xd6\xf8\x06\xae\x43\x81\x36\xa7\xff\x60\x61\x2a\xf1\x29\xd6\x32\x0a\x10\x7c\x23\xe2\x42\xb4\x23\x62\x96\x54\xe1\xe3\x94\x45\xd2\x25\x2c\x92\x6a\x43\x19\xcd\x84\x02\x5f\x98\x44\x77\xa8\x6c\x64\xd0\x82\x9b\xb3\x95\x92\x13\x3a\x61\x12\xff\xa4\xed\x48\x7a\xf4\x61\xb2\x84\xcc\x88\xe1\x1f\xc5\x51\xe1\x93\xb0\x0e\xb4\x4a\x88\x48\xa1\x19\x8a\x97\x59\x60\x68\x30\x64\x06\x3d\xa5\xfd\x95\x31\x8b\x80\xcd\xc8\x7c\xcd\xc2\x69\x6b\x1d\x9b\x09\x35\xeb\xc4\x41\x6e\x8f\x27\xc7\xbf\x1e\xff\xbb\xba\x78\x14\x49\x99\x9b\x5c\x7f\x3a\xd0\x6e\x64\x90\x4e\xb7\x58\xc5\x75\x10\x30\xe5\xaf\x8c\xdb\x83\x4e\x79\xef\x63\x3b\x2f\xa6\x52\x85\x5d\xd3\x79\xd8\x32\x41\xca\xf1\xe2\xb3\xf5\x56\x6a\xf5\x52\x85\x59\xcf\x17\xa6\x58\x0a\x10\x10\xf1\x88\xb9\x79\x17\x3a\x99\x6a\xbd\x2a\x41\x03\xd7\x44\xaa\x04\x70\x04\x17\x5a\x7d\x70\xc0\x7c\x1f\x0e\x53\x34\xa3\x43\x36\x4b\x82\x52\x17\xbe\x88\xf4\x00\x84\x56\x4c\x1e\xfe\x0b\x84\x4b\xe3\x94\x64\x7c\x91\x6e\x0e\xa8\x9c\x59\xae\x61\xa9\xbc\x57\xbe\xbf\xaf\xf9\x02\x8d\xd5\x7c\xb1\x86\x28\x66\x86\x08\x3b\xe9\xc2\xe3\xca\xca\x1c\x44\xea\xd9\x1a\x6a\x3a\xfb\xf2\xec\x11\x4c\x93\x30\x69\x23\x43\xe1\x93\x0c\x2c\xdd\x42\x8a\x49\x27\xb3\xa3\x4e\x72\xb6\x36\x35\x22\x4b\x56\x54\x31\x93\x7c\xd3\x98\x19\x4f\x8a\xc9\x86\x8d\xbd\xfa\x92\x42\x68\x8c\xd7\x90\x95\x67\xbc\x86\x1e\x88\xc9\xaa\x97\xc2\x9a\xa0\x4a\x1e\xce\x23\x23\xdc\x92\x7c\x18\x9f\x5c\xb7\x44\x10\x1a\x11\x0b\x89\x33\xf4\x2b\x41\x06\xe8\xda\x68\x5a\xde\xb7\xfb\x2f\xbd\xf1\x60\x78\xd1\x1b\x0f\xce\xae\x7b\x25\x98\x24\xb0\x7f\x35\x3a\x28\x63\x03\x4c\x05\x4a\xff\x06\xa7\xd5\x51\xba\x2b\x56\x57\x77\x7c\x5a\x9b\x4c\x88\x52\x49\x29\xd4\x1f\x93\xc6\x29\x2a\x35\xb8\x79\xe8\xdf\xdc\x5d\xf5\xee\xc6\x17\xfd\xdb\xb3\x2f\x57\xbd\xf1\xb7\x87\xeb\xe7\x59\x4a\xc3\xe2\x35\x0b\xbf\xe1\xb2\x85\xb3\x8a\x02\xbd\x74\x71\x6d\xc9\x02\x97\x5d\xf0\x85\xa5\x60\x3e\x5e\xc4\x41\x6d\x5a\x87\xa9\x4f\xd4\xf4\x59\x67\xfa\xf6\xa6\x3f\x7c\x18\xdf\xde\x8f\x46\xc3\x9b\xbb\xbd\xb1\x6d\x8d\xd0\xf1\xd8\x46\x61\xa8\x8d\xdb\x8d\xf1\x8b\xe1\xf7\xc1\xd5\xf0\xec\x62\x3c\xba\x19\xde\x0d\xcf\x87\x57\xfb\xd3\xb9\x7e\x54\x52\x33\x7f\x1c\x1a\xed\x34\xd7\x72\x37\x01\xae\x86\x97\x57\xbd\x87\xde\xfe\xf8\x96\x7a\x26\x31\xc6\x1d\xd9\x3d\x3f\xbb\xea\x9f\x0f\xc7\xb7\xf7\x5f\x06\xbd\xfd\x19\x0a\x67\x52\x70\xed\xd9\x68\xa2\xf0\x85\x86\xd2\xbf\x3e\xbb\xec\x8d\x6f\x7a\x97\xbd\x3f\x46\xe3\xbb\x9b\xb3\xc1\xed\xd5\xd9\x5d\x7f\x38\xd8\x1b\xef\x49\xcc\x1e\x1b\x9c\xe1\x53\x38\x76\x86\x29\x2b\x93\x4b\x6b\x37\xfd\xdf\x9c\x7d\x1f\x5f\xf4\x1e\xfa\xe7\xbd\xdb\xbd\x49\x60\xd8\xe3\xd8\x47\xca\xca\xec\x8e\x4e\x9a\x85\xc4\xab\xe1\xe5\x65\x7f\x70\xb9\xf7\xb0\x28\xf5\x8c\x52\xa6\x1d\x2d\x7e\x74\x3f\xbe\x1e\x5e\xec\xd1\x43\x79\x18\x79\x81\xf6\x5f\xea\xa2\x74\x1d\x26\x26\x32\x1c\x92\xca\x6f\xf6\xc6\x6f\x96\xd0\x8d\x8d\xd6\x6e\x5c\xcd\xfb\x5e\xa0\xe7\xd4\x51\x4b\x1e\x7a\xdb\x26\x44\x17\x3a\xe8\x78\x9e\x6b\x64\x09\xd1\xc1\x41\x21\x4f\xad\x2a\x28\xf2\xb0\x34\x81\xda\x2d\xa3\x3e\x82\xbe\x02\xce\x2c\xc2\x23\x55\x18\x7f\x22\x77\x20\x35\x67\xb2\xc8\xea\x13\x38\x9a\x7d\x64\xca\x51\x29\x41\x15\x95\x70\xa0\xb4\x03\x3d\x9d\x0a\x2e\x98\x94\x4b\x60\x31\x13\x32\xa9\xba\xb4\xc2\x37\x48\xd8\x33\xa9\xb6\xc9\xd5\xcb\x09\x1b\x29\x30\xcf\x28\xff\xc2\x20\x6a\x64\x6c\x95\xc1\x2a\xad\x5d\xda\xce\xd4\x76\xf8\xcc\xe8\x28\x6c\x10\xd6\x86\xab\xa4\x94\x23\x06\xda\x8f\x64\x25\x8c\xa4\x84\xcd\x71\x83\xcc\x1f\x2a\xb9\x6c\x58\x4d\x19\x92\x6a\xcf\x06\x56\x6d\x70\x2b\xa0\xf7\x2e\x36\x9a\x25\xcd\xeb\x72\xe8\x76\xea\xba\x95\xc3\x1a\xeb\x6f\x52\x53\x1d\xf3\x0c\xb5\x47\x05\x0e\x3a\x5b\x72\x0b\xaa\x61\xa5\x9e\x25\xd5\xb1\x28\xea\xde\x39\x1a\x84\x09\x72\x96\xb4\x15\xdc\x1c\xcd\xa3\xb0\x58\xd4\xc2\x89\xaa\x42\xa3\xfd\x88\x23\xa0\x31\xda\x94\x21\xa5\x58\x20\xb8\xb9\xa8\xf4\xa4\xee\xb3\x56\x85\xa6\xf2\xd8\xcb\x7a\x0a\x7c\xce\x8c\x8f\x31\x4c\x85\x44\xf8\x90\xea\x40\x93\x13\xdb\x0e\x9b\xfa\x9f\x7e\x9d\x4c\x26\xde\x67\xfc\xed\x93\x77\x7a\x8a\x9f\xbc\xdf\x7e\xfd\xcf\xa9\x77\xf2\xf1\x97\x8f\x27\x8c\x9f\x9c\x9c\x9c\x7c\xec\x70\x61\x8c\xb6\x5e\x1c\x8c\x4f\x8e\xa5\x9e\x7d\xe8\xc2\x40\x83\x8d\xf8\x3c\x45\xd4\xa6\xa8\xe9\x97\xcd\x0a\x2b\xb0\xde\xfa\xd2\xae\xc4\x4a\xb3\x20\xcc\x94\xf9\x3c\x75\xf3\xd0\x5e\x52\xa2\xed\x52\x64\x91\xa7\x08\x85\xd6\x8e\x8c\x9e\x60\x99\x04\x9f\x56\x4d\xae\xf4\xd7\x08\x47\x29\x8b\x9d\x89\x50\x9d\x52\x38\x4a\x47\x3d\x5e\x1b\xb0\x9a\x33\x07\x1e\xdc\x0f\xfa\x7f\x74\xeb\x06\xd8\x29\x1b\x9c\x67\x34\xfc\x97\x24\xeb\xa8\x48\xca\x5a\x54\xaf\x7b\xc5\x8f\x17\xd5\xdf\x3b\x5c\xef\x3f\xae\x1d\xa5\x51\x39\xe9\x96\x95\x43\x3e\x30\x83\x60\xf0\xaf\x48\x98\xb4\x37\x66\xa3\x10\x4d\x20\xd6\x45\xc4\xbf\xdb\x6d\xb1\xbf\xfe\x48\x8e\xbb\xf6\x68\xfe\x56\xb7\x40\x15\x25\xb2\x09\x0f\x14\x2f\x92\x3e\x9f\x51\xe8\xd0\x16\x2d\xbf\xac\xd7\xd7\x49\xcd\xbe\x43\xcb\x1a\x1b\x6d\xd1\x4f\x6c\x97\x3b\xdb\xa4\x13\x6a\xbf\x69\x32\x84\x4a\x13\xad\x7d\xc9\x6d\x34\xfd\xda\xc0\x9f\x6c\xfe\x3c\x69\x85\xf9\xa3\xfc\x4a\x9d\x26\xb7\x11\x9b\x29\x6d\x9d\xe0\x10\x46\x26\xd4\x16\xdf\xe3\x76\x51\xe8\x36\x36\x6f\x73\x33\x49\xd6\xbd\x42\x91\x8d\x04\xf2\xf9\x24\xf3\x47\xba\xd2\x48\x45\x99\x5f\x27\x8d\xe1\x0d\x77\x58\xc9\x56\xf6\xd4\xe7\x8f\x03\xfb\xd2\x92\xe1\x2d\x62\xd8\xef\xda\xba\x3b\x7d\x5e\x7b\x54\x7a\x7d\x14\xdb\xdd\x33\xdf\x2f\x8a\xac\x97\xf5\x65\xf7\xc8\xba\xfb\x6e\xf3\x4d\x99\x9e\x68\xe9\x69\x8c\x50\x4b\x19\x3a\x85\x93\xb9\xb6\x0e\x0c\x7b\x84\xb4\xb3\x03\x8c\x73\xb4\xb6\x30\xce\xe4\xad\x8f\xf0\xcb\x5e\xd6\xe4\xb0\x2e\xcd\x46\xc2\x76\xb7\x6e\x89\x07\x1b\x51\xda\x12\x83\x36\x35\x6d\x04\xa9\xdc\xfa\x8d\x44\x60\x23\x69\x39\xd9\xa9\xa7\x3f\x47\x70\x37\xbc\x18\x76\xc1\x4f\xd2\x2c\x2a\x50\xb8\xf6\x31\x7b\x4a\x82\xf4\xea\x4c\x92\x4c\xb2\x92\xa4\x50\x5a\x11\xce\x45\xf6\xb6\x9e\x25\x49\x70\x7e\xd3\xa7\x3a\xe9\x69\x09\x42\x59\xc7\x64\xda\x36\xa4\x3c\xb4\xbc\xa1\x50\xe9\x51\xa6\xf9\x59\xf1\x9a\x7a\xbc\x8d\x28\x9b\x5e\xb0\xd6\x3c\x82\x3d\x8b\xd7\x16\x25\xda\x62\xc4\x56\x40\x75\x67\x6f\x0b\x01\xcf\x03\x95\xa2\x42\xfd\x55\x6e\x23\xf1\x2b\x92\x99\x2d\x53\x99\xad\x94\xd0\x1a\x91\xd6\xc6\xa3\x6d\x20\xeb\x07\x53\x79\x0c\xdc\x46\x9f\x45\xff\xad\x1c\x4f\xdb\xe2\xf0\x56\x60\x1b\x4f\xf9\x25\x60\x6d\xf9\xeb\xa6\xec\x75\x2b\xee\x5a\xd4\x5e\xcb\xe5\xb6\xe2\xab\x9a\x30\xb5\x27\x5b\x1b\x81\xd6\x96\x81\xa5\x22\xb0\xfe\x21\x52\xf1\x0d\xd2\x79\xde\xe9\x5d\xff\x0d\xd2\xaa\xc1\xbb\xe6\x53\xa4\x9c\xaa\xf4\xd8\xd8\x85\xc3\xe5\xe1\x01\x14\x6f\x4a\x5d\x38\xfc\x85\xfe\x2e\xbd\x18\x74\xe1\xd0\xfa\xff\x3c\x6c\xb0\x66\x26\x8c\x1f\xb3\xc8\xcd\xb5\x11\xff\x4b\x22\xdb\xf1\xe2\xb3\x3d\x16\xba\x13\x9f\x4e\xd0\xb1\x82\xf3\xf4\x83\x99\x1b\x2d\xf1\x8b\x50\xbe\x50\xb3\x0d\x9f\x51\x19\x2d\x31\x6b\x64\xb3\x50\x5c\xd2\x95\xb2\x61\xa7\x03\x80\xc6\x1e\x0d\x48\x1b\x4d\xfe\x44\x4e\x99\x91\x97\xad\xbe\xad\x7c\xa1\xb2\xfd\xa7\x5c\xa4\x81\xe6\x7e\x2f\xd3\xc9\x0e\x5f\x90\x19\xba\x13\x69\xbd\x57\xe8\x24\xcb\x0c\x3c\x38\x3c\x4c\xfe\x63\xd0\xea\xc8\x70\x2c\xc6\x8b\xaf\x75\x6c\x36\xa0\xb4\x9f\x5d\xac\x31\x9a\xc9\x6a\x5d\xd2\x8a\xcb\xfe\x98\xa1\x7b\x8b\x53\x6e\x91\xb1\x60\xc7\xa3\x7c\x1e\x4d\x2e\x53\x4d\xa2\x4c\x9e\x8a\x34\x35\x59\x0a\xee\x53\x76\xe9\x5f\x29\x6c\xfa\x9f\x47\xe6\xf8\xfc\x9d\x24\xc8\x7d\x2c\xb2\x68\x68\xe6\xd5\x82\x78\x54\x0e\x99\x34\x94\xd5\x84\x7a\x57\x4f\xcb\x2f\x3f\x32\x08\x6f\x92\x2d\x7b\x43\xb7\x6b\x1c\x75\xd9\xff\x5e\x02\x7e\x99\xe5\x93\x29\x6c\xea\x0b\xdd\xd4\x8c\xdf\x37\x14\x05\xab\x43\x7e\x07\xfd\xac\x33\xa4\x1f\x24\x4c\x79\xdc\xf8\xeb\x8d\x9e\x85\x02\x9f\x1c\x2a\xda\xc6\x66\x98\x6d\x8e\x10\x59\xa7\x83\x7c\xd0\xc7\xa9\x50\x22\xf9\x36\xb5\xea\x0b\x59\x70\x6a\x6e\x93\x17\xe6\x8b\xcf\xb6\x05\x3d\x9b\x4d\xca\xeb\x80\x85\xa1\x50\x33\x5b\x9e\x28\x2c\x34\x9f\x29\x6d\x59\xc4\x92\x77\xf7\xc3\x8a\x3e\xdf\xde\xbc\x08\xf6\x6d\x4d\xaa\x35\x2d\xa9\x01\xee\x70\xbb\xfd\x3f\x00\x00\xff\xff\x16\x1e\xed\x80\x7b\x2d\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 11643, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
