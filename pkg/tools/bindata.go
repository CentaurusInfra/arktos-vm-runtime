// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\xdb\x52\x1b\xb9\xb6\xef\x7c\xc5\x2a\xa8\x3a\x99\x39\x75\x1a\x03\x27\x64\x12\xd7\xde\x0f\x04\x8c\xe3\x8c\xb1\x89\x0d\x86\xcd\x8b\x4b\xad\x5e\xb6\x85\xd5\x52\x8f\xa4\x6e\x70\xbe\x7e\x97\xfa\xe6\xbe\xd8\xc6\x10\xa0\x66\xfc\x42\x23\x69\x2d\xad\xfb\x45\x92\xe3\x38\x3b\x24\x60\x23\x54\x9a\x49\xd1\x04\x12\x04\xba\x11\x1d\xee\xcc\x99\xf0\x9a\x70\x46\xd0\x97\x62\x88\x66\xc7\x47\x43\x3c\x62\x48\x73\x07\x40\x10\x1f\x9b\x10\x31\x65\x38\x9a\xf4\x7f\x1d\x10\x8a\x4d\x98\x87\x2e\x3a\x7a\xa1\x0d\xfa\x3b\x3a\x40\x6a\x97\x6b\xe4\x48\x8d\x54\xf6\x1b\xc0\x27\x86\xce\xba\xc4\x45\xae\x93\x01\x00\x15\x0a\xc3\xca\x28\x0d\xfa\x01\x27\x06\x53\x98\xc2\xe6\xf6\x47\x84\x90\x86\x18\x26\x45\x8e\x03\x60\x0f\xcc\x0c\x2d\xfd\x44\xf9\x52\x81\x42\x0b\xef\x15\xd7\xc2\x03\xe3\x1c\x5c\x04\x85\x01\x27\x14\x3d\xe8\x9c\x03\xe5\xa1\x36\xa8\x80\x69\x4b\x87\x60\x62\x0a\xa1\xf0\x50\x2d\x31\xa1\x20\x2e\x47\x0f\x50\x44\xf9\x66\xd9\x24\x67\xae\x25\x3a\x91\x48\x65\x30\x22\x3c\xc4\x1a\x44\xe4\xeb\xf2\xea\xc8\xd7\x6b\x56\x26\xd2\xa8\xac\x4e\x06\x8b\x10\x55\x75\xd8\x1f\x2f\x09\x78\xa5\x88\x01\x32\x05\xd9\xdf\x4c\x6a\xd3\x43\xf3\x20\xd5\xbc\x09\x46\xe5\xc8\x3d\xa1\x2f\x25\x67\x74\xd1\x84\xd3\x44\x52\xe7\x4c\x69\x73\xc3\xcc\xec\x5b\x02\xb2\x93\x89\xdf\xa2\xb8\xec\x9c\x59\x49\x5a\x04\x60\x24\xfc\x76\xf8\x7b\x2a\x3e\x18\x5d\x68\x3b\xa2\x43\x15\xb1\x08\x33\x3a\x80\x4a\x61\x08\x13\x68\x15\xa6\x0d\x51\x4b\x74\xbf\x19\x69\x75\x45\x67\x48\xe7\xe8\xfd\x0e\x44\x78\xf0\xdb\xd1\xef\x16\x49\x8a\xd2\xea\x3b\xd4\x08\x72\x02\x42\xa3\x88\xb5\x28\x80\x09\x56\x40\x5b\x60\xef\xb2\x73\x56\x62\x6d\x0f\x5c\x29\x8d\x36\x8a\x04\x10\x28\x49\xd1\x0b\x15\x82\x40\xf4\x62\x4a\xa9\x42\x62\x10\x88\xc5\x35\x61\x53\x9f\x04\x16\x7b\xc1\xc0\x97\x76\x9f\x22\xd4\xa8\x22\x46\xf1\x84\x52\x19\x0a\xd3\x2b\xa9\x25\xdf\x53\x0a\xbe\xb0\xea\x80\x51\x2a\x81\x40\x7a\x1a\xa4\x88\xb9\x11\xd2\x43\x6b\xa6\x66\x06\xf8\x68\x14\x19\x24\x6a\xfb\x77\x26\xad\x58\xad\x99\x13\x4c\x26\x96\xd5\xc5\x52\xc9\x16\xfa\xa4\x36\x0a\xa0\xf0\xaf\x90\x29\xf4\xce\x42\xc5\xc4\x74\x48\x67\xe8\x85\x9c\x89\x69\x67\x2a\x64\x3e\xdc\x7a\x44\x1a\x5a\x37\x29\x42\x26\x38\x87\xa9\x03\x5f\xa1\xf2\x75\x79\xda\x49\xfc\xb9\xf5\x18\x28\xd4\xba\xec\x90\xd9\x8a\x39\x2e\x9a\x25\x76\x2a\x2b\x00\x64\x80\x8a\xd8\x08\x01\x1d\x51\x9b\x8c\x4d\xbd\x86\xd6\x22\x2e\x9b\x3c\xf3\xc9\x14\x2f\x43\xce\x87\x48\x15\x9a\x1c\xc2\x49\x1d\x44\x61\x20\x1d\xa2\xe6\x46\x6a\x6d\xc8\x94\x89\x69\x06\x28\x98\x39\xcd\xec\x25\x07\xdb\x83\xab\x19\x56\x8c\x09\xa8\x0c\x18\xea\x6c\xe3\x0f\x1a\x26\x1c\x1f\x23\xc9\x43\x1f\xc1\x53\x2c\xca\xed\x6d\xcf\x5a\x90\xd5\xa8\x87\x13\x12\x72\x13\xdb\x4d\xac\x6d\x1e\x4e\x99\x00\x8f\xa9\xd8\xa0\x51\xe8\x50\xa1\x06\x33\x23\x4b\xcb\x8f\xe1\x98\x8a\x65\x6e\xb7\xb3\x26\x89\x1e\xb8\x0b\x48\x23\x0b\xfc\x4f\xee\x3f\xf8\xc8\xb4\xc9\xcc\xc7\x5a\x79\x85\xeb\x40\x61\x40\x14\x3a\x56\x8f\xb9\x08\x63\x51\x35\xa1\x24\x8c\x46\xe4\x67\x41\xe2\x60\xff\x78\xff\xa8\xbc\xd8\xca\x35\x8b\x03\x9d\x49\x4f\x9a\x4b\x85\xd6\xe5\xf2\x55\x54\xfa\x3e\x11\xde\x52\x4d\x0e\x34\x8a\x7b\xef\xeb\x59\x3e\x95\x08\xec\xc2\x3a\x89\x2e\x02\x24\x14\xcf\x3f\x6b\x67\x29\x56\x27\x11\x98\x76\x3c\xa6\x0a\x26\xe0\x5b\xe0\x4b\x62\x66\x4d\x68\xa4\xa2\x75\xca\x00\x35\xbc\x2a\x2c\xda\xd6\x1e\x9c\x49\xf1\xc1\x00\xf1\x3c\xd8\x4d\xb0\x29\x19\x90\x69\x9c\x29\x9a\xf0\x95\x25\x0a\x60\x52\x10\xbe\xfb\x7f\xc0\x4c\x92\x3c\x38\xa1\xf3\x64\x73\x40\x61\xd4\x62\x0d\x49\xc5\xbd\xb2\xfd\x3d\x49\xe7\xa8\xb4\xa4\xf3\x35\x40\x11\x51\x16\xb0\x91\x2c\xdc\x2f\xad\xcc\x90\x70\x39\x5d\x03\x6d\x75\x5f\x9c\xdd\x83\x49\x9c\xbb\x74\xec\xdd\xb1\x81\x25\x5b\x70\xe6\x36\x52\x3b\x6a\xc4\xba\xd5\x89\x11\xc5\x41\xa8\x64\x26\xd9\xa6\x11\x51\x0e\x67\xee\x86\x8d\x9d\xea\x92\x9c\x69\x8c\xd6\x80\x15\x67\x9c\x9a\x1c\x2c\x91\x65\xf7\x86\x35\x99\xce\x86\x5d\x1a\x2a\x66\x16\xd6\x87\xf1\xd1\x14\x23\x45\xa0\x58\xc4\x38\x4e\xd1\x2b\x45\x7e\xb0\xb9\xbc\x6e\x79\x7f\x5e\x7f\x6d\x8d\x7b\xfd\xb3\xd6\xb8\x77\x72\xd1\x2a\xa0\x89\x43\xd0\xb9\x92\x7e\x39\x0a\x4d\x18\x72\x6f\x80\x93\x6a\x6c\x2a\xd6\x53\xd1\x61\x65\x32\x06\x4a\x38\xb5\xf9\x77\xdf\x4a\xdc\xa6\x8a\x1a\x35\xa3\xce\xe0\xaa\xdb\xba\x1a\x9f\x75\x86\x27\x5f\xbb\xad\xf1\x9f\xa3\x8b\xa7\x49\x4a\x72\xd5\x05\x09\xfe\xc4\xc5\x0a\xca\x4a\x02\x74\x92\xc5\x95\x25\x71\xb4\xf6\x98\xb6\x19\x76\x3c\x8f\xfc\xca\xb4\x0c\x12\x9f\xa8\xc8\xb3\x4a\xf4\x70\xd0\xe9\x8f\xc6\xc3\xeb\xcb\xcb\xfe\xe0\xea\xdd\xc8\xd6\x8a\xc9\x68\xac\xc3\x20\x90\xca\xbc\x8c\xf0\xb3\xfe\x4d\xaf\xdb\x3f\x39\x1b\x5f\x0e\xfa\x57\xfd\xd3\x7e\xf7\xfd\x64\x2e\x1f\x04\x97\xc4\x1b\x07\x4a\x1a\x49\x25\x7f\x19\x03\xdd\x7e\xbb\xdb\x1a\xb5\xde\x8f\x6e\x2e\xa7\x1c\x23\x7c\x21\xb9\xa7\x27\xdd\xce\x69\x7f\x3c\xbc\xfe\xda\x6b\xbd\x9f\xa1\x50\xc2\x19\x95\x8e\x0e\x5d\x81\xcf\x34\x94\xce\xc5\x49\xbb\x35\x1e\xb4\xda\xad\xdb\xcb\xf1\xd5\xe0\xa4\x37\xec\x9e\x5c\x75\xfa\xbd\x77\xa3\x3d\x8e\xd9\x63\x85\x53\x7c\x0c\xc6\x46\x11\xa1\x79\x9c\xb4\x5e\x26\xff\xc1\xc9\xcd\xf8\xac\x35\xea\x9c\xb6\x86\xef\xc6\x81\x22\x0f\x63\x0f\x6d\xa9\xac\x5f\xe8\xa4\x69\x48\xec\xf6\xdb\xed\x4e\xaf\xfd\xee\x61\x91\xcb\x69\xa1\x7e\x7c\x26\xf1\xa7\x97\xd7\xe3\x8b\xfe\xd9\x3b\x7a\x28\x0d\x42\xc7\x97\xde\x73\x5d\xd4\xa6\xc3\xd8\x44\xfa\x7d\x2b\xf2\xc1\xbb\xd1\x9b\x16\x74\x63\x25\xa5\x19\x97\xeb\xbe\x67\xc8\x39\x71\xd4\x82\x87\x0e\x57\x31\xd1\x84\x06\x1a\x9a\xd5\x1a\x69\x41\x94\x75\x6b\xb4\xd6\x15\xe4\x75\x58\x52\x40\xbd\xac\xa2\xde\x83\x8e\x00\x4a\x34\xc2\x83\xed\x30\xee\x91\x1a\xe0\x92\x12\x9e\x57\xf5\x31\x3a\x3b\xfb\x40\x84\xb1\xad\x84\x6d\x73\x99\x01\x21\x0d\xc8\xc9\x84\x51\x46\x38\x5f\x00\x89\x08\xe3\x71\x2b\x2c\x05\xbe\x42\xc1\x9e\x72\xb5\x4d\xad\x5e\x2c\xd8\xac\x00\xb3\x8a\xf2\x2f\xf4\xc3\x5a\xc5\x56\x1a\x2c\xc3\xea\x85\x6e\x4c\x74\x83\x4e\x95\x0c\x83\x1a\x60\x65\xb8\x0c\x6a\x6b\x44\x5f\x7a\x21\x2f\x85\x91\x04\xb0\x3e\xae\x90\x78\x7d\xc1\x17\x35\xab\x29\xa2\x74\xa5\xac\xd7\x9b\x95\xc1\xad\x10\xbd\x75\xb3\x51\x6f\x69\x7e\xad\x86\x5e\x0d\x5d\xb5\x72\x58\x63\xfd\x75\x68\xdb\xc7\x3c\x01\xed\xd8\x06\x07\x8d\x2e\xb8\x85\xed\x61\xb9\x9c\xc6\xdd\x31\xcb\xfb\xde\x19\x2a\x04\x17\x29\x89\xcf\x7a\xcc\x0c\xd5\x03\xd3\x98\xf7\xc2\xb1\xa8\x02\x25\xbd\x90\x22\xa0\x52\x52\x15\x51\x72\x36\x47\x30\x33\x56\x3a\x28\xbc\x4e\xcf\x8f\xa4\x6d\x8f\x9d\xf4\xa0\x87\xce\x88\xf2\x30\x82\x09\xe3\x08\x1f\x12\x19\x48\xeb\xc4\xba\x41\x26\xde\x1f\xc7\xae\xeb\x3a\x9f\xf1\xcb\x1f\xce\xe1\x21\xfe\xe1\x7c\x39\xfe\x74\xe8\x1c\x1c\x7d\x3c\x3a\x20\xf4\xe0\xe0\xe0\xe0\xa8\x41\x99\x52\x52\x3b\x91\x3f\x3e\xd8\xe7\x72\xfa\xa1\x09\x3d\x09\x3a\xa4\xb3\x04\xa3\x54\x79\x4f\xbf\xa8\x77\x58\xbe\x76\xd6\xb7\x76\x05\x52\xea\x0d\x61\x2a\xcc\xa7\xa1\xeb\x4a\x7b\x4e\x8b\xf6\x92\x26\xcb\x7a\x0a\x13\xa8\xf5\xa5\x92\x2e\x16\x41\xf0\x71\x79\xf2\x98\xfc\x6a\xe1\x28\x21\xb1\xe1\x32\xd1\x28\x84\xa3\x64\xd4\xa1\x95\x01\x2d\x29\x31\xe0\xc0\x75\xaf\x73\xdb\xac\x1a\x60\xa3\x68\x70\x8e\x92\xf0\x2f\xcb\x59\x43\x84\x9c\x57\xa2\x7a\xd5\x2b\xfe\x79\x51\xfd\xad\xc3\xf5\xfb\xc7\xb5\xbd\x24\x2a\xc7\xa7\x65\xc5\x90\x0f\x44\x61\x7e\xb2\x09\xee\x02\x74\x18\xa0\xf2\xd9\xba\x88\xf8\x77\xcb\x16\xef\x77\x3e\x92\xe1\x5d\xab\x9a\xbf\x55\x16\x28\x63\x09\x75\x4c\x83\x8d\x17\xf1\x39\x9f\x12\x68\x50\xe7\x47\x7e\xe9\x59\x5f\x23\x31\xfb\x86\x5d\x56\xdb\x68\x8b\xf3\xc4\xd5\x7c\xa7\x9b\x34\x02\xe9\xd5\x4d\xc6\x62\xb5\x13\x2b\xcf\x25\xb7\x91\xf4\xcb\x03\x7f\xd5\x97\x2b\xb5\x6b\x95\xd2\x78\xd8\xb1\xdf\x4e\xa1\x5b\xac\x67\x92\x98\x9b\xa7\x69\x29\x49\x63\x2f\xcb\xd1\x93\x38\xbd\x91\xa9\x90\xda\x30\x0a\x41\xa8\x02\xa9\xf1\x2d\xd2\x95\x40\xb3\xf1\x34\x38\xb3\xbb\x78\xdd\x2f\x68\xa6\x56\x91\x3e\x5d\xb5\xfe\x93\x72\xa4\x15\x51\x6a\x38\xf1\x49\xf3\x86\xa4\x58\x30\xbe\x77\xba\x38\x88\x7c\xfd\xdc\x1e\xe4\x35\x82\xe2\x37\xa9\xcd\x95\x3c\xad\x5c\x1d\xfe\x7a\x58\x7c\x1d\x57\x7f\xdd\xb0\xb4\x9e\xd7\xe7\x25\xa6\x75\x09\x74\x73\xea\x4d\x34\x5a\xb8\x6b\xb3\x58\x0b\x25\xbf\x0d\x27\x33\xa9\x0d\x28\xf2\x00\xc9\x51\x11\x10\x4a\x51\xeb\xdc\x38\xe3\x1b\x5d\x8b\xbf\xe8\x65\x75\x0a\xab\xdc\x6c\x04\x5c\xed\xd6\x2b\xe2\xc1\x46\x2c\xab\x2a\x8d\x55\x62\xda\x88\xa4\x54\x46\xd4\x2a\x8b\x8d\xa0\xc5\xea\xa9\x5a\x4f\xed\xc1\x55\xff\xac\xdf\x04\x2f\xae\xdb\x6c\xc7\x43\xa5\x87\xe9\xdd\x14\x24\xb9\x38\xae\x5a\xad\x95\xc4\x9d\xd7\x12\x70\xc6\xd2\x17\x14\x69\xd5\x05\xa7\x83\x8e\x6d\xbc\x1e\x17\xc0\x84\x36\x84\x27\x99\xc5\x16\xb6\xc5\x0d\x99\x48\x54\x99\x14\x7c\xf9\x9d\xf9\xfe\x36\xac\x6c\xba\x12\x5b\x73\xab\xf6\x24\xbe\x55\x51\x62\x55\x8c\xd8\x0a\x51\xd5\xd9\x57\x85\x80\xa7\x11\x15\xa2\x42\xf5\x9a\x6f\x23\xf0\x2f\x54\x47\x5b\xd6\x46\x5b\x09\x61\x65\x44\x5a\x1b\x8f\xb6\x41\x59\x55\x4c\xe9\x76\x71\x1b\x79\xe6\x45\x51\x31\x9e\xae\x8a\xc3\x5b\x21\xdb\xa8\xe5\xe7\x20\x5b\x55\x10\x6f\x2a\x87\xb7\xa2\x6e\x85\xd8\x2b\xb5\xdc\x56\x74\x95\x0b\xa6\xd5\xc5\xd6\x46\x44\x6b\xfb\xca\x5a\x57\xe9\x2c\x4f\x8a\x9b\xeb\x32\xb5\x93\xd4\xad\x2b\x4b\xd6\xcd\x85\x6d\xf5\x49\x5b\xfe\x9a\xed\x34\xdb\x74\xfd\x6b\xb6\xe5\xa9\xf4\x9a\x47\x6d\x19\x54\xe1\x86\xb4\x09\xbb\x8b\xdd\x1d\xc8\x2f\xc2\x9a\xb0\xfb\xd1\xfe\x5f\xb8\xe6\x68\xc2\xae\xf6\xfe\x77\x77\x3d\x69\xc9\x9b\x95\x1d\xb3\x08\xd2\xfd\x12\x57\xde\x67\x32\x8d\x7d\x09\x5d\xf7\x5a\x8a\x15\xc4\xaf\x7c\xda\xf2\x04\x03\xfb\x55\xbc\x4d\xc0\xc5\xf7\x99\x77\x3b\x90\x74\xd1\xf9\x84\x8b\xef\xd2\xfb\x36\x78\xa0\x3f\x65\xd4\x3d\xe2\xe1\x5d\x7b\xf4\xb1\xeb\x0f\xa2\xff\x1c\x19\x4e\xd9\x71\xe0\x2e\xbe\x1c\x5d\x0c\x3f\xb3\xbe\xd0\xcc\xbb\xed\x71\xea\x1f\xcf\xdc\x9b\x6b\xd6\x67\xdf\x67\x6e\xdb\xcc\xc8\xcd\xe0\xa7\xd7\x3e\x17\xe4\xe6\x58\x74\xd8\x03\xa3\xed\xf3\x9f\xf4\xff\xbd\x88\xfa\x3f\xec\x9a\x11\x3d\x1a\x2d\x7e\x9c\xb5\x16\x17\x3f\x7f\x1c\xda\xf9\xbb\x9b\xc3\x19\xb9\x79\xb0\x73\x1f\xc9\xcd\x79\xe4\xfa\x3c\xbc\x5b\x1c\xcf\x2d\xfc\x8f\xf6\xdd\xa1\xf7\x6d\xb4\xb8\xbb\xf5\x38\x19\x1e\xdf\xbb\x47\x07\xac\x7b\x9a\xd0\xda\xb9\x97\xec\x66\xe4\x7d\xa4\x9c\xdf\xba\x6d\x73\x7f\x71\xf8\x5d\xde\xdc\x7f\xd7\xde\x28\xf8\x44\xcf\xef\xee\x2f\xf8\xdd\xf1\xf5\xf5\xe0\x1c\xaf\x0f\x3f\x5d\x5f\xb5\xd8\xe4\xf6\xf0\x4b\x4d\x0d\xca\x25\x74\x9f\x84\x66\x26\x15\xfb\x19\x5b\xd1\xfe\xfc\x73\x2c\xfc\xe8\xd0\x45\x43\x72\x03\x4a\x5e\xc0\x0d\x24\xc7\xaf\x4c\x78\x56\xce\xeb\xdf\x45\x2a\xc9\x31\xbd\x04\x21\x01\x6b\xdb\xea\x61\xc3\x4e\x3b\x00\xb5\x3d\x6a\x28\x75\xe8\xde\x23\xb5\x45\xb0\x03\x99\xdd\x14\x9f\x9c\x6d\xff\x36\xd3\x4a\xa0\xbe\xdf\xf3\x64\xf2\x82\x27\xa1\xca\x96\x3f\x76\xbd\x93\xcb\x24\x2d\x02\x1d\xd8\xdd\x8d\x3f\x14\x6a\x19\x2a\x8a\xf9\x78\xfe\xfc\x4e\xa7\x03\xf1\x23\xb9\xf8\x3b\x42\xe5\x2e\xd7\xc5\xc7\xb8\xe9\x3f\x53\x34\xaf\xa1\xe5\x15\x3c\xe6\xe4\x38\xb6\x75\x43\x95\xf1\x54\xe1\x28\xe5\xa7\xc4\x4d\x85\x97\x9c\xfa\x84\x5c\xfb\x97\x33\x9d\x7c\x3c\x10\x43\x67\x6f\xc4\x41\x16\xea\x42\x8d\xca\xce\xfc\x32\x23\x8e\xed\x7c\x55\x92\xb5\x2a\x4c\xbd\xa9\xa7\x65\x75\x8e\x35\x08\xc7\x4d\x97\xbd\xa2\xdb\xd5\x54\x5d\xf4\xbf\xe7\x20\x6f\xa7\xad\x43\x82\x36\xf1\x85\x66\x62\xc6\x6f\x1b\x8a\xfc\xa5\x92\xdf\x40\x3e\xeb\x0c\xe9\x1f\x12\xa6\x1c\xaa\xbc\xf5\x46\x4f\x02\x86\x8f\x06\x45\xfc\xa8\x35\xc5\xb9\xca\x11\x42\x6d\xa4\x9f\x0d\x7a\x18\xbf\xbe\x4d\x8b\x95\x82\x2f\xa4\xc1\xa9\xbe\x4d\x76\x06\x33\xff\xac\x57\x60\x4f\x67\xe3\x4a\xc7\x27\x41\xc0\xc4\x54\x17\x27\x72\x0b\xcd\x66\x0a\x5b\xe6\xb1\xe4\xcd\xfd\xb0\x24\xcf\xd7\x37\x2f\x8b\xf6\x75\x4d\x6a\x4d\x09\x56\x42\xf8\x82\xec\xf6\xdf\x00\x00\x00\xff\xff\x54\x31\x59\xae\x4c\x31\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 12620, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
