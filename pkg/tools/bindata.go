// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x5b\x53\x1b\x39\x97\xef\xfc\x8a\x53\x50\xb5\x99\xd9\xda\xc6\xc0\x84\x4c\xe2\xda\x7d\x20\x60\x1c\x67\x8c\x4d\x6c\x30\x2c\x2f\x2e\xb5\xfa\xd8\x16\x56\x4b\x3d\x92\xba\xc1\xf9\xf5\x5f\xa9\x6f\xee\x8b\x6d\x0c\x01\x6a\xc6\x2f\x34\x92\xce\xd1\xb9\x5f\x24\x39\x8e\xb3\x43\x02\x36\x42\xa5\x99\x14\x4d\x20\x41\xa0\x1b\xd1\xe1\xce\x9c\x09\xaf\x09\x67\x04\x7d\x29\x86\x68\x76\x7c\x34\xc4\x23\x86\x34\x77\x00\x04\xf1\xb1\x09\x11\x53\x86\xa3\x49\xff\xd7\x01\xa1\xd8\x84\x79\xe8\xa2\xa3\x17\xda\xa0\xbf\xa3\x03\xa4\x76\xb9\x46\x8e\xd4\x48\x65\xbf\x01\x7c\x62\xe8\xac\x4b\x5c\xe4\x3a\x19\x00\x50\xa1\x30\xac\x8c\xd2\xa0\x1f\x70\x62\x30\x85\x29\x6c\x6e\x7f\x44\x08\x69\x88\x61\x52\xe4\x38\x00\xf6\xc0\xcc\xd0\xd2\x4f\x94\x2f\x15\x28\xb4\xf0\x5e\x71\x2d\x3c\x30\xce\xc1\x45\x50\x18\x70\x42\xd1\x83\xce\x39\x50\x1e\x6a\x83\x0a\x98\xb6\x74\x08\x26\xa6\x10\x0a\x0f\xd5\x12\x13\x0a\xe2\x72\xf4\x00\x45\x94\x6f\x96\x4d\x72\xe6\x5a\xa2\x13\x89\x54\x06\x23\xc2\x43\xac\x41\x44\xbe\x2e\xaf\x8e\x7c\xbd\x66\x65\x22\x8d\xca\xea\x64\xb0\x08\x51\x55\x87\xfd\xf1\x92\x80\x57\x8a\x18\x20\x53\x90\xfd\xcd\xa4\x36\x3d\x34\x0f\x52\xcd\x9b\x60\x54\x8e\xdc\x13\xfa\x52\x72\x46\x17\x4d\x38\x4d\x24\x75\xce\x94\x36\x37\xcc\xcc\xbe\x25\x20\x3b\x99\xf8\x2d\x8a\xcb\xce\x99\x95\xa4\x45\x00\x46\xc2\x6f\x87\xbf\xa7\xe2\x83\xd1\x85\xb6\x23\x3a\x54\x11\x8b\x30\xa3\x03\xa8\x14\x86\x30\x81\x56\x61\xda\x10\xb5\x44\xf7\x9b\x91\x56\x57\x74\x86\x74\x8e\xde\xef\x40\x84\x07\xbf\x1d\xfd\x6e\x91\xa4\x28\xad\xbe\x43\x8d\x20\x27\x20\x34\x8a\x58\x8b\x02\x98\x60\x05\xb4\x05\xf6\x2e\x3b\x67\x25\xd6\xf6\xc0\x95\xd2\x68\xa3\x48\x00\x81\x92\x14\xbd\x50\x21\x08\x44\x2f\xa6\x94\x2a\x24\x06\x81\x58\x5c\x13\x36\xf5\x49\x60\xb1\x17\x0c\x7c\x69\xf7\x29\x42\x8d\x2a\x62\x14\x4f\x28\x95\xa1\x30\xbd\x92\x5a\xf2\x3d\xa5\xe0\x0b\xab\x0e\x18\xa5\x12\x08\xa4\xa7\x41\x8a\x98\x1b\x21\x3d\xb4\x66\x6a\x66\x80\x8f\x46\x91\x41\xa2\xb6\xff\xcb\xa4\x15\xab\x35\x73\x82\xc9\xc4\xb2\xba\x58\x2a\xd9\x42\x9f\xd4\x46\x01\x14\xfe\x1d\x32\x85\xde\x59\xa8\x98\x98\x0e\xe9\x0c\xbd\x90\x33\x31\xed\x4c\x85\xcc\x87\x5b\x8f\x48\x43\xeb\x26\x45\xc8\x04\xe7\x30\x75\xe0\x2b\x54\xbe\x2e\x4f\x3b\x89\x3f\xb7\x1e\x03\x85\x5a\x97\x1d\x32\x5b\x31\xc7\x45\xb3\xc4\x4e\x65\x05\x80\x0c\x50\x11\x1b\x21\xa0\x23\x6a\x93\xb1\xa9\xd7\xd0\x5a\xc4\x65\x93\x67\x3e\x99\xe2\x65\xc8\xf9\x10\xa9\x42\x93\x43\x38\xa9\x83\x28\x0c\xa4\x43\xd4\xdc\x48\xad\x0d\x99\x32\x31\xcd\x00\x05\x33\xa7\x99\xbd\xe4\x60\x7b\x70\x35\xc3\x8a\x31\x01\x95\x01\x43\x9d\x6d\xfc\x41\xc3\x84\xe3\x63\x24\x79\xe8\x23\x78\x8a\x45\xb9\xbd\xed\x59\x0b\xb2\x1a\xf5\x70\x42\x42\x6e\x62\xbb\x89\xb5\xcd\xc3\x29\x13\xe0\x31\x15\x1b\x34\x0a\x1d\x2a\xd4\x60\x66\x64\x69\xf9\x31\x1c\x53\xb1\xcc\xed\x76\xd6\x24\xd1\x03\x77\x01\x69\x64\x81\xff\xca\xfd\x07\x1f\x99\x36\x99\xf9\x58\x2b\xaf\x70\x1d\x28\x0c\x88\x42\xc7\xea\x31\x17\x61\x2c\xaa\x26\x94\x84\xd1\x88\xfc\x2c\x48\x1c\xec\x1f\xef\xff\x51\x5e\x6c\xe5\x9a\xc5\x81\xce\xa4\x27\xcd\xa5\x42\xeb\x72\xf9\x2a\x2a\x7d\x9f\x08\x6f\xa9\x26\x07\x1a\xc5\xbd\xf7\xf5\x2c\x9f\x4a\x04\x76\x61\x9d\x44\x17\x01\x12\x8a\xe7\x9f\xb5\xb3\x14\xab\x93\x08\x4c\x3b\x1e\x53\x05\x13\xf0\x2d\xf0\x25\x31\xb3\x26\x34\x52\xd1\x3a\x65\x80\x1a\x5e\x15\x16\x6d\x6b\x0f\xce\xa4\xf8\x60\x80\x78\x1e\xec\x26\xd8\x94\x0c\xc8\x34\xce\x14\x4d\xf8\xca\x12\x05\x30\x29\x08\xdf\xfd\x1f\x60\x26\x49\x1e\x9c\xd0\x79\xb2\x39\xa0\x30\x6a\xb1\x86\xa4\xe2\x5e\xd9\xfe\x9e\xa4\x73\x54\x5a\xd2\xf9\x1a\xa0\x88\x28\x0b\xd8\x48\x16\xee\x97\x56\x66\x48\xb8\x9c\xae\x81\xb6\xba\x2f\xce\xee\xc1\x24\xce\x5d\x3a\xf6\xee\xd8\xc0\x92\x2d\x38\x73\x1b\xa9\x1d\x35\x62\xdd\xea\xc4\x88\xe2\x20\x54\x32\x93\x6c\xd3\x88\x28\x87\x33\x77\xc3\xc6\x4e\x75\x49\xce\x34\x46\x6b\xc0\x8a\x33\x4e\x4d\x0e\x96\xc8\xb2\x7b\xc3\x9a\x4c\x67\xc3\x2e\x0d\x15\x33\x0b\xeb\xc3\xf8\x68\x8a\x91\x22\x50\x2c\x62\x1c\xa7\xe8\x95\x22\x3f\xd8\x5c\x5e\xb7\xbc\xbf\xae\xbf\xb6\xc6\xbd\xfe\x59\x6b\xdc\x3b\xb9\x68\x15\xd0\xc4\x21\xe8\x5c\x49\xbf\x1c\x85\x26\x0c\xb9\x37\xc0\x49\x35\x36\x15\xeb\xa9\xe8\xb0\x32\x19\x03\x25\x9c\xda\xfc\xbb\x6f\x25\x6e\x53\x45\x8d\x9a\x51\x67\x70\xd5\x6d\x5d\x8d\xcf\x3a\xc3\x93\xaf\xdd\xd6\xf8\xaf\xd1\xc5\xd3\x24\x25\xb9\xea\x82\x04\x7f\xe1\x62\x05\x65\x25\x01\x3a\xc9\xe2\xca\x92\x38\x5a\x7b\x4c\xdb\x0c\x3b\x9e\x47\x7e\x65\x5a\x06\x89\x4f\x54\xe4\x59\x25\x7a\x38\xe8\xf4\x47\xe3\xe1\xf5\xe5\x65\x7f\x70\xf5\x6e\x64\x6b\xc5\x64\x34\xd6\x61\x10\x48\x65\x5e\x46\xf8\x59\xff\xa6\xd7\xed\x9f\x9c\x8d\x2f\x07\xfd\xab\xfe\x69\xbf\xfb\x7e\x32\x97\x0f\x82\x4b\xe2\x8d\x03\x25\x8d\xa4\x92\xbf\x8c\x81\x6e\xbf\xdd\x6d\x8d\x5a\xef\x47\x37\x97\x53\x8e\x11\xbe\x90\xdc\xd3\x93\x6e\xe7\xb4\x3f\x1e\x5e\x7f\xed\xb5\xde\xcf\x50\x28\xe1\x8c\x4a\x47\x87\xae\xc0\x67\x1a\x4a\xe7\xe2\xa4\xdd\x1a\x0f\x5a\xed\xd6\xed\xe5\xf8\x6a\x70\xd2\x1b\x76\x4f\xae\x3a\xfd\xde\xbb\xd1\x1e\xc7\xec\xb1\xc2\x29\x3e\x06\x63\xa3\x88\xd0\x3c\x4e\x5a\x2f\x93\xff\xe0\xe4\x66\x7c\xd6\x1a\x75\x4e\x5b\xc3\x77\xe3\x40\x91\x87\xb1\x87\xb6\x54\xd6\x2f\x74\xd2\x34\x24\x76\xfb\xed\x76\xa7\xd7\x7e\xf7\xb0\xc8\xe5\xb4\x50\x3f\x3e\x93\xf8\xd3\xcb\xeb\xf1\x45\xff\xec\x1d\x3d\x94\x06\xa1\xe3\x4b\xef\xb9\x2e\x6a\xd3\x61\x6c\x22\xfd\xbe\x15\xf9\xe0\xdd\xe8\x4d\x0b\xba\xb1\x92\xd2\x8c\xcb\x75\xdf\x33\xe4\x9c\x38\x6a\xc1\x43\x87\xab\x98\x68\x42\x03\x0d\xcd\x6a\x8d\xb4\x20\xca\xba\x35\x5a\xeb\x0a\xf2\x3a\x2c\x29\xa0\x5e\x56\x51\xef\x41\x47\x00\x25\x1a\xe1\xc1\x76\x18\xf7\x48\x0d\x70\x49\x09\xcf\xab\xfa\x18\x9d\x9d\x7d\x20\xc2\xd8\x56\xc2\xb6\xb9\xcc\x80\x90\x06\xe4\x64\xc2\x28\x23\x9c\x2f\x80\x44\x84\xf1\xb8\x15\x96\x02\x5f\xa1\x60\x4f\xb9\xda\xa6\x56\x2f\x16\x6c\x56\x80\x59\x45\xf9\x37\xfa\x61\xad\x62\x2b\x0d\x96\x61\xf5\x42\x37\x26\xba\x41\xa7\x4a\x86\x41\x0d\xb0\x32\x5c\x06\xb5\x35\xa2\x2f\xbd\x90\x97\xc2\x48\x02\x58\x1f\x57\x48\xbc\xbe\xe0\x8b\x9a\xd5\x14\x51\xba\x52\xd6\xeb\xcd\xca\xe0\x56\x88\xde\xba\xd9\xa8\xb7\x34\xbf\x56\x43\xaf\x86\xae\x5a\x39\xac\xb1\xfe\x3a\xb4\xed\x63\x9e\x80\x76\x6c\x83\x83\x46\x17\xdc\xc2\xf6\xb0\x5c\x4e\xe3\xee\x98\xe5\x7d\xef\x0c\x15\x82\x8b\x94\xc4\x67\x3d\x66\x86\xea\x81\x69\xcc\x7b\xe1\x58\x54\x81\x92\x5e\x48\x11\x50\x29\xa9\x8a\x28\x39\x9b\x23\x98\x19\x2b\x1d\x14\x5e\xa7\xe7\x47\xd2\xb6\xc7\x4e\x7a\xd0\x43\x67\x44\x79\x18\xc1\x84\x71\x84\x0f\x89\x0c\xa4\x75\x62\xdd\x20\x13\xef\xcf\x63\xd7\x75\x9d\xcf\xf8\xe5\x4f\xe7\xf0\x10\xff\x74\xbe\x1c\x7f\x3a\x74\x0e\x8e\x3e\x1e\x1d\x10\x7a\x70\x70\x70\x70\xd4\xa0\x4c\x29\xa9\x9d\xc8\x1f\x1f\xec\x73\x39\xfd\xd0\x84\x9e\x04\x1d\xd2\x59\x82\x51\xaa\xbc\xa7\x5f\xd4\x3b\x2c\x5f\x3b\xeb\x5b\xbb\x02\x29\xf5\x86\x30\x15\xe6\xd3\xd0\x75\xa5\x3d\xa7\x45\x7b\x49\x93\x65\x3d\x85\x09\xd4\xfa\x52\x49\x17\x8b\x20\xf8\xb8\x3c\x79\x4c\x7e\xb5\x70\x94\x90\xd8\x70\x99\x68\x14\xc2\x51\x32\xea\xd0\xca\x80\x96\x94\x18\x70\xe0\xba\xd7\xb9\x6d\x56\x0d\xb0\x51\x34\x38\x47\x49\xf8\x5f\xcb\x59\x43\x84\x9c\x57\xa2\x7a\xd5\x2b\xfe\x7d\x51\xfd\xad\xc3\xf5\xfb\xc7\xb5\xbd\x24\x2a\xc7\xa7\x65\xc5\x90\x0f\x44\x61\x7e\xb2\x09\xee\x02\x74\x18\xa0\xf2\xd9\xba\x88\xf8\x4f\xcb\x16\xef\x77\x3e\x92\xe1\x5d\xab\x9a\x7f\x54\x16\x28\x63\x09\x75\x4c\x83\x8d\x17\xf1\x39\x9f\x12\x68\x50\xe7\x47\x7e\xe9\x59\x5f\x23\x31\xfb\x86\x5d\x56\xdb\x68\x8b\xf3\xc4\xd5\x7c\xa7\x9b\x34\x02\xe9\xd5\x4d\xc6\x62\xb5\x13\x2b\xcf\x25\xb7\x91\xf4\xcb\x03\x7f\xd5\x97\x2b\xb5\x6b\x95\xd2\x78\xd8\xb1\xdf\x4e\xa1\x5b\xac\x67\x92\x98\x9b\xa7\x69\x29\x49\x63\x2f\xcb\xd1\x93\x38\xbd\x91\xa9\x90\xda\x30\x0a\x41\xa8\x02\xa9\xf1\x2d\xd2\x95\x40\xb3\xf1\x34\x38\xb3\xbb\x78\xdd\x2f\x68\xa6\x56\x91\x3e\x5d\xb5\xfe\x9b\x72\xa4\x15\x51\x6a\x38\xf1\x49\xf3\x86\xa4\x58\x30\xbe\x77\xba\x38\x88\x7c\xfd\xdc\x1e\xe4\x35\x82\xe2\x37\xa9\xcd\x95\x3c\xad\x5c\x1d\xfe\x7a\x58\x7c\x1d\x57\x7f\xdd\xb0\xb4\x9e\xd7\xe7\x25\xa6\x75\x09\x74\x73\xea\x4d\x34\x5a\xb8\x6b\xb3\x58\x0b\x25\xbf\x0d\x27\x33\xa9\x0d\x28\xf2\x00\xc9\x51\x11\x10\x4a\x51\xeb\xdc\x38\xe3\x1b\x5d\x8b\xbf\xe8\x65\x75\x0a\xab\xdc\x6c\x04\x5c\xed\xd6\x2b\xe2\xc1\x46\x2c\xab\x2a\x8d\x55\x62\xda\x88\xa4\x54\x46\xd4\x2a\x8b\x8d\xa0\xc5\xea\xa9\x5a\x4f\xed\xc1\x55\xff\xac\xdf\x04\x2f\xae\xdb\x6c\xc7\x43\xa5\x87\xe9\xdd\x14\x24\xb9\x38\xae\x5a\xad\x95\xc4\x9d\xd7\x12\x70\xc6\xd2\x17\x14\x69\xd5\x05\xa7\x83\x8e\x6d\xbc\x1e\x17\xc0\x84\x36\x84\x27\x99\xc5\x16\xb6\xc5\x0d\x99\x48\x54\x99\x14\x7c\xf9\x9d\xf9\xfe\x36\xac\x6c\xba\x12\x5b\x73\xab\xf6\x24\xbe\x55\x51\x62\x55\x8c\xd8\x0a\x51\xd5\xd9\x57\x85\x80\xa7\x11\x15\xa2\x42\xf5\x9a\x6f\x23\xf0\x2f\x54\x47\x5b\xd6\x46\x5b\x09\x61\x65\x44\x5a\x1b\x8f\xb6\x41\x59\x55\x4c\xe9\x76\x71\x1b\x79\xe6\x45\x51\x31\x9e\xae\x8a\xc3\x5b\x21\xdb\xa8\xe5\xe7\x20\x5b\x55\x10\x6f\x2a\x87\xb7\xa2\x6e\x85\xd8\x2b\xb5\xdc\x56\x74\x95\x0b\xa6\xd5\xc5\xd6\x46\x44\x6b\xfb\xca\x5a\x57\xe9\x2c\x4f\x8a\x9b\xeb\x32\xb5\x93\xd4\xad\x2b\x4b\xd6\xcd\x85\x6d\xf5\x49\x5b\xfe\x9a\xed\x34\xdb\x74\xfd\x6b\xb6\xe5\xa9\xf4\x9a\x47\x6d\x19\x54\xe1\x86\xb4\x09\xbb\x8b\xdd\x1d\xc8\x2f\xc2\x9a\xb0\xfb\xd1\xfe\x5f\xb8\xe6\x68\xc2\xae\xf6\xfe\x7b\x77\x3d\x69\xc9\x9b\x95\x1d\xb3\x08\xd2\xfd\x12\x57\xde\x67\x32\x8d\x7d\x09\x5d\xf7\x5a\x8a\x15\xc4\xaf\x7c\xda\xf2\x04\x03\xfb\x55\xbc\x4d\xc0\xc5\xf7\x99\x77\x3b\x90\x74\xd1\xf9\x84\x8b\xef\xd2\xfb\x36\x78\xa0\x3f\x65\xd4\x3d\xe2\xe1\x5d\x7b\xf4\xb1\xeb\x0f\xa2\xff\x3f\x32\x9c\xb2\xe3\xc0\x5d\x7c\x39\xba\x18\x7e\x66\x7d\xa1\x99\x77\xdb\xe3\xd4\x3f\x9e\xb9\x37\xd7\xac\xcf\xbe\xcf\xdc\xb6\x99\x91\x9b\xc1\x4f\xaf\x7d\x2e\xc8\xcd\xb1\xe8\xb0\x07\x46\xdb\xe7\x3f\xe9\x1f\x5e\x44\xfd\x1f\x76\xcd\x88\x1e\x8d\x16\x3f\xce\x5a\x8b\x8b\x9f\x3f\x0e\xed\xfc\xdd\xcd\xe1\x8c\xdc\x3c\xd8\xb9\x8f\xe4\xe6\x3c\x72\x7d\x1e\xde\x2d\x8e\xe7\x16\xfe\x47\xfb\xee\xd0\xfb\x36\x5a\xdc\xdd\x7a\x9c\x0c\x8f\xef\xdd\xa3\x03\xd6\x3d\x4d\x68\xed\xdc\x4b\x76\x33\xf2\x3e\x52\xce\x6f\xdd\xb6\xb9\xbf\x38\xfc\x2e\x6f\xee\xbf\x6b\x6f\x14\x7c\xa2\xe7\x77\xf7\x17\xfc\xee\xf8\xfa\x7a\x70\x8e\xd7\x87\x9f\xae\xaf\x5a\x6c\x72\x7b\xf8\xa5\xa6\x06\xe5\x12\xba\x4f\x42\x33\x93\x8a\xfd\x8c\xad\x68\x7f\xfe\x39\x16\x7e\x74\xe8\xa2\x21\xb9\x01\x25\x2f\xe0\x06\x92\xe3\x57\x26\x3c\x2b\xe7\xf5\xef\x22\x95\xe4\x98\x5e\x82\x90\x80\xb5\x6d\xf5\xb0\x61\xa7\x1d\x80\xda\x1e\x35\x94\x3a\x74\xef\x91\xda\x22\xd8\x81\xcc\x6e\x8a\x4f\xce\xb6\x7f\x9b\x69\x25\x50\xdf\xef\x79\x32\x79\xc1\x93\x50\x65\xcb\x1f\xbb\xde\xc9\x65\x92\x16\x81\x0e\xec\xee\xc6\x1f\x0a\xb5\x0c\x15\xc5\x7c\x3c\x7f\x7e\xa7\xd3\x81\xf8\x91\x5c\xfc\x1d\xa1\x72\x97\xeb\xe2\x63\xdc\xf4\x9f\x29\x9a\xd7\xd0\xf2\x0a\x1e\x73\x72\x1c\xdb\xba\xa1\xca\x78\xaa\x70\x94\xf2\x53\xe2\xa6\xc2\x4b\x4e\x7d\x42\xae\xfd\xcb\x99\x4e\x3e\x1e\x88\xa1\xb3\x37\xe2\x20\x0b\x75\xa1\x46\x65\x67\x7e\x99\x11\xc7\x76\xbe\x2a\xc9\x5a\x15\xa6\xde\xd4\xd3\xb2\x3a\xc7\x1a\x84\xe3\xa6\xcb\x5e\xd1\xed\x6a\xaa\x2e\xfa\xdf\x73\x90\xb7\xd3\xd6\x21\x41\x9b\xf8\x42\x33\x31\xe3\xb7\x0d\x45\xfe\x52\xc9\x6f\x20\x9f\x75\x86\xf4\x2f\x09\x53\x0e\x55\xde\x7a\xa3\x27\x01\xc3\x47\x83\x22\x7e\xd4\x9a\xe2\x5c\xe5\x08\xa1\x36\xd2\xcf\x06\x3d\x8c\x5f\xdf\xa6\xc5\x4a\xc1\x17\xd2\xe0\x54\xdf\x26\x3b\x83\x99\x7f\xd6\x2b\xb0\xa7\xb3\x71\xa5\xe3\x93\x20\x60\x62\xaa\x8b\x13\xb9\x85\x66\x33\x85\x2d\xf3\x58\xf2\xe6\x7e\x58\x92\xe7\xeb\x9b\x97\x45\xfb\xba\x26\xb5\xa6\x04\x2b\x21\x7c\x41\x76\xfb\x4f\x00\x00\x00\xff\xff\xda\xba\xd4\xa6\x4c\x31\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 12620, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
